类的层次结构分为：功能层次结构和实现层次结构

当我们想要编写子类时，需要先确认清除子类的意图：是要增加功能还是增加实现

当类的层次结构只有一层时，功能层次结构与实现层次结构是混杂在一个层次结构中的

这样很容易使类的层次结构变得复杂，也难以透彻地理解类的层次结构，因为难以确定究竟在哪个类的层次结构（功能还是实现？）中增加子类

因此需要将类的功能层次结构和类的实现层次结构分离为两个独立的类层次结构，Bridge模式的作用就是搭建两种层次结构的桥梁，使两者建立联系

类的功能层次结构：Display、CountDisplay
类的实现层次结构：DisplayImpl、StringDisplayImpl

Abstraction（抽象化），该角色位于“类的功能层次结构”的顶层，它使用Implementor角色的方法定义了基本的功能
该角色保存了Implementor角色的实例。实例中Display类扮演了Abstraction角色

RefinedAbstraction(改善后的抽象化），在Abstraction角色的基础上增加了新功能的角色。CountDisplay扮演了此角色

Implementor（实现者），该角色位于“类的实现层次结构”的最上层。它定义了用于实现Abstraction角色的接口（API）
的方法。DisplayImpl类扮演了此角色

ConcreteImplementor（具体实现者），该角色负责实现在Implementor角色中定义的接口（API）。
StringDisplayImpl扮演了此角色。